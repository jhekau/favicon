// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/convert/convert.go

// Package mock_convert is a generated GoMock package.
package mock_convert

import (
	reflect "reflect"

	types "github.com/jhekau/favicon/internal/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockConverterT is a mock of ConverterT interface.
type MockConverterT struct {
	ctrl     *gomock.Controller
	recorder *MockConverterTMockRecorder
}

// MockConverterTMockRecorder is the mock recorder for MockConverterT.
type MockConverterTMockRecorder struct {
	mock *MockConverterT
}

// NewMockConverterT creates a new mock instance.
func NewMockConverterT(ctrl *gomock.Controller) *MockConverterT {
	mock := &MockConverterT{ctrl: ctrl}
	mock.recorder = &MockConverterTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverterT) EXPECT() *MockConverterTMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockConverterT) Do(source, save types.FilePath, size_px int, typ types.FileType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", source, save, size_px, typ)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockConverterTMockRecorder) Do(source, save, size_px, typ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockConverterT)(nil).Do), source, save, size_px, typ)
}

// MockCheckPreview is a mock of CheckPreview interface.
type MockCheckPreview struct {
	ctrl     *gomock.Controller
	recorder *MockCheckPreviewMockRecorder
}

// MockCheckPreviewMockRecorder is the mock recorder for MockCheckPreview.
type MockCheckPreviewMockRecorder struct {
	mock *MockCheckPreview
}

// NewMockCheckPreview creates a new mock instance.
func NewMockCheckPreview(ctrl *gomock.Controller) *MockCheckPreview {
	mock := &MockCheckPreview{ctrl: ctrl}
	mock.recorder = &MockCheckPreviewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckPreview) EXPECT() *MockCheckPreviewMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockCheckPreview) Check(typ types.FileType, size_px int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", typ, size_px)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockCheckPreviewMockRecorder) Check(typ, size_px interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockCheckPreview)(nil).Check), typ, size_px)
}

// MockCheckSource is a mock of CheckSource interface.
type MockCheckSource struct {
	ctrl     *gomock.Controller
	recorder *MockCheckSourceMockRecorder
}

// MockCheckSourceMockRecorder is the mock recorder for MockCheckSource.
type MockCheckSourceMockRecorder struct {
	mock *MockCheckSource
}

// NewMockCheckSource creates a new mock instance.
func NewMockCheckSource(ctrl *gomock.Controller) *MockCheckSource {
	mock := &MockCheckSource{ctrl: ctrl}
	mock.recorder = &MockCheckSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckSource) EXPECT() *MockCheckSourceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockCheckSource) Check(fpath types.FilePath, originalSVG bool, thumb_size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", fpath, originalSVG, thumb_size)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockCheckSourceMockRecorder) Check(fpath, originalSVG, thumb_size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockCheckSource)(nil).Check), fpath, originalSVG, thumb_size)
}
