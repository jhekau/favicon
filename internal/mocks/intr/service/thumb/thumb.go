// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/thumb/thumb.go

// Package mock_thumb is a generated GoMock package.
package mock_thumb

import (
	io "io"
	reflect "reflect"

	types "github.com/jhekau/favicon/internal/core/types"
	thumb "github.com/jhekau/favicon/internal/service/thumb"
	domain "github.com/jhekau/favicon/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageOBJ is a mock of StorageOBJ interface.
type MockStorageOBJ struct {
	ctrl     *gomock.Controller
	recorder *MockStorageOBJMockRecorder
}

// MockStorageOBJMockRecorder is the mock recorder for MockStorageOBJ.
type MockStorageOBJMockRecorder struct {
	mock *MockStorageOBJ
}

// NewMockStorageOBJ creates a new mock instance.
func NewMockStorageOBJ(ctrl *gomock.Controller) *MockStorageOBJ {
	mock := &MockStorageOBJ{ctrl: ctrl}
	mock.recorder = &MockStorageOBJMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageOBJ) EXPECT() *MockStorageOBJMockRecorder {
	return m.recorder
}

// IsExists mocks base method.
func (m *MockStorageOBJ) IsExists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExists indicates an expected call of IsExists.
func (mr *MockStorageOBJMockRecorder) IsExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockStorageOBJ)(nil).IsExists))
}

// Key mocks base method.
func (m *MockStorageOBJ) Key() domain.StorageKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(domain.StorageKey)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockStorageOBJMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockStorageOBJ)(nil).Key))
}

// Reader mocks base method.
func (m *MockStorageOBJ) Reader() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reader indicates an expected call of Reader.
func (mr *MockStorageOBJMockRecorder) Reader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockStorageOBJ)(nil).Reader))
}

// Writer mocks base method.
func (m *MockStorageOBJ) Writer() (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Writer")
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Writer indicates an expected call of Writer.
func (mr *MockStorageOBJMockRecorder) Writer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockStorageOBJ)(nil).Writer))
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// NewObject mocks base method.
func (m *MockStorage) NewObject() (thumb.StorageOBJ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewObject")
	ret0, _ := ret[0].(thumb.StorageOBJ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewObject indicates an expected call of NewObject.
func (mr *MockStorageMockRecorder) NewObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewObject", reflect.TypeOf((*MockStorage)(nil).NewObject))
}

// MockConverter is a mock of Converter interface.
type MockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockConverterMockRecorder
}

// MockConverterMockRecorder is the mock recorder for MockConverter.
type MockConverterMockRecorder struct {
	mock *MockConverter
}

// NewMockConverter creates a new mock instance.
func NewMockConverter(ctrl *gomock.Controller) *MockConverter {
	mock := &MockConverter{ctrl: ctrl}
	mock.recorder = &MockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverter) EXPECT() *MockConverterMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockConverter) Do(source, save thumb.StorageOBJ, originalSVG bool, typThumb types.FileType, size_px int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", source, save, originalSVG, typThumb, size_px)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockConverterMockRecorder) Do(source, save, originalSVG, typThumb, size_px interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockConverter)(nil).Do), source, save, originalSVG, typThumb, size_px)
}

// Mockcache is a mock of cache interface.
type Mockcache struct {
	ctrl     *gomock.Controller
	recorder *MockcacheMockRecorder
}

// MockcacheMockRecorder is the mock recorder for Mockcache.
type MockcacheMockRecorder struct {
	mock *Mockcache
}

// NewMockcache creates a new mock instance.
func NewMockcache(ctrl *gomock.Controller) *Mockcache {
	mock := &Mockcache{ctrl: ctrl}
	mock.recorder = &MockcacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcache) EXPECT() *MockcacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *Mockcache) Delete(key any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockcacheMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockcache)(nil).Delete), key)
}

// Load mocks base method.
func (m *Mockcache) Load(key any) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockcacheMockRecorder) Load(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*Mockcache)(nil).Load), key)
}

// Range mocks base method.
func (m *Mockcache) Range(f func(any, any) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", f)
}

// Range indicates an expected call of Range.
func (mr *MockcacheMockRecorder) Range(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*Mockcache)(nil).Range), f)
}

// Store mocks base method.
func (m *Mockcache) Store(key, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", key, value)
}

// Store indicates an expected call of Store.
func (mr *MockcacheMockRecorder) Store(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*Mockcache)(nil).Store), key, value)
}
