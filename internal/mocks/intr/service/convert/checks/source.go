// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/convert/checks/source.go

// Package mock_checks is a generated GoMock package.
package mock_checks

import (
	reflect "reflect"

	storage "github.com/jhekau/favicon/pkg/models/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// SetErr mocks base method.
func (m *MockCache) SetErr(original storage.StorageKey, originalSVG bool, thumb_size int, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetErr", original, originalSVG, thumb_size, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetErr indicates an expected call of SetErr.
func (mr *MockCacheMockRecorder) SetErr(original, originalSVG, thumb_size, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockCache)(nil).SetErr), original, originalSVG, thumb_size, err)
}

// Status mocks base method.
func (m *MockCache) Status(original storage.StorageKey, originalSVG bool, thumb_size int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", original, originalSVG, thumb_size)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockCacheMockRecorder) Status(original, originalSVG, thumb_size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockCache)(nil).Status), original, originalSVG, thumb_size)
}

// MockResolution is a mock of Resolution interface.
type MockResolution struct {
	ctrl     *gomock.Controller
	recorder *MockResolutionMockRecorder
}

// MockResolutionMockRecorder is the mock recorder for MockResolution.
type MockResolutionMockRecorder struct {
	mock *MockResolution
}

// NewMockResolution creates a new mock instance.
func NewMockResolution(ctrl *gomock.Controller) *MockResolution {
	mock := &MockResolution{ctrl: ctrl}
	mock.recorder = &MockResolutionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolution) EXPECT() *MockResolutionMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockResolution) Get(arg0 storage.StorageOBJ) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockResolutionMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResolution)(nil).Get), arg0)
}
