// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/core/models/converter/converter.type.go

// Package mock_converter is a generated GoMock package.
package mock_converter

import (
	reflect "reflect"

	storage "github.com/jhekau/favicon/pkg/core/models/storage"
	types "github.com/jhekau/favicon/pkg/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockConverterTyp is a mock of ConverterTyp interface.
type MockConverterTyp struct {
	ctrl     *gomock.Controller
	recorder *MockConverterTypMockRecorder
}

// MockConverterTypMockRecorder is the mock recorder for MockConverterTyp.
type MockConverterTypMockRecorder struct {
	mock *MockConverterTyp
}

// NewMockConverterTyp creates a new mock instance.
func NewMockConverterTyp(ctrl *gomock.Controller) *MockConverterTyp {
	mock := &MockConverterTyp{ctrl: ctrl}
	mock.recorder = &MockConverterTypMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverterTyp) EXPECT() *MockConverterTypMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockConverterTyp) Do(source, save storage.StorageOBJ, size_px int, typThumb types.FileType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", source, save, size_px, typThumb)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockConverterTypMockRecorder) Do(source, save, size_px, typThumb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockConverterTyp)(nil).Do), source, save, size_px, typThumb)
}
