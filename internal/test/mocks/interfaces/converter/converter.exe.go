// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/converter/converter.exe.go

// Package mock_converter is a generated GoMock package.
package mock_converter

import (
	reflect "reflect"

	types "github.com/jhekau/favicon/domain/types"
	storage "github.com/jhekau/favicon/interfaces/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockConverterExec is a mock of ConverterExec interface.
type MockConverterExec struct {
	ctrl     *gomock.Controller
	recorder *MockConverterExecMockRecorder
}

// MockConverterExecMockRecorder is the mock recorder for MockConverterExec.
type MockConverterExecMockRecorder struct {
	mock *MockConverterExec
}

// NewMockConverterExec creates a new mock instance.
func NewMockConverterExec(ctrl *gomock.Controller) *MockConverterExec {
	mock := &MockConverterExec{ctrl: ctrl}
	mock.recorder = &MockConverterExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverterExec) EXPECT() *MockConverterExecMockRecorder {
	return m.recorder
}

// Proc mocks base method.
func (m *MockConverterExec) Proc(source, save storage.StorageOBJ, size_px int, typ types.FileType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proc", source, save, size_px, typ)
	ret0, _ := ret[0].(error)
	return ret0
}

// Proc indicates an expected call of Proc.
func (mr *MockConverterExecMockRecorder) Proc(source, save, size_px, typ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proc", reflect.TypeOf((*MockConverterExec)(nil).Proc), source, save, size_px, typ)
}
