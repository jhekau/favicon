// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/converter/converter.go

// Package mock_converter is a generated GoMock package.
package mock_converter

import (
	reflect "reflect"

	types "github.com/jhekau/favicon/domain/types"
	storage "github.com/jhekau/favicon/interfaces/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockConverter is a mock of Converter interface.
type MockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockConverterMockRecorder
}

// MockConverterMockRecorder is the mock recorder for MockConverter.
type MockConverterMockRecorder struct {
	mock *MockConverter
}

// NewMockConverter creates a new mock instance.
func NewMockConverter(ctrl *gomock.Controller) *MockConverter {
	mock := &MockConverter{ctrl: ctrl}
	mock.recorder = &MockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverter) EXPECT() *MockConverterMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockConverter) Do(source, save storage.StorageOBJ, originalSVG bool, typThumb types.FileType, size_px int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", source, save, originalSVG, typThumb, size_px)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockConverterMockRecorder) Do(source, save, originalSVG, typThumb, size_px interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockConverter)(nil).Do), source, save, originalSVG, typThumb, size_px)
}
